import { Controller, Get, Res, Param, Inject } from '@nestjs/common';
import { Response } from 'express';
import { Ctx, RequestContext } from '@vendure/core';
import { SeoService } from './seo.service';
import { SeoPluginOptions } from './index';

@Controller('seo')
export class SeoController {
  constructor(
    private seoService: SeoService,
    @Inject('SEO_PLUGIN_OPTIONS') private options: SeoPluginOptions
  ) {}

  @Get('sitemap.xml')
  async getSitemapIndex(@Res() res: Response) {
    try {
      const sitemap = await this.seoService.generateSitemapIndex();
      res.set({
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=3600' // Cache for 1 hour
      });
      res.send(sitemap);
    } catch (error) {
      res.status(500).send('Error generating sitemap index');
    }
  }

  @Get('sitemap-:type.xml')
  async getSitemap(@Param('type') type: string, @Ctx() ctx: RequestContext, @Res() res: Response) {
    try {
      let sitemap: string;
      
      switch (type) {
        case 'products':
          sitemap = await this.seoService.generateProductSitemap(ctx);
          break;
        case 'collections':
          sitemap = await this.seoService.generateCollectionSitemap(ctx);
          break;
        case 'main':
          sitemap = await this.seoService.generateMainSitemap();
          break;
        default:
          res.status(404).send('Sitemap not found');
          return;
      }
      
      res.set({
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=3600' // Cache for 1 hour
      });
      res.send(sitemap);
    } catch (error) {
      res.status(500).send(`Error generating ${type} sitemap`);
    }
  }

  @Get('robots.txt')
  async getRobotsTxt(@Res() res: Response) {
    // This endpoint serves as a backup if robots.txt is not found in public folder
    const robotsTxt = `# Robots.txt for ${this.options.companyName}
# Generated by Vendure SEO Plugin

User-agent: *
Allow: /

# Disallow sensitive areas
Disallow: /admin/
Disallow: /admin-api/
Disallow: /shop-api/
Disallow: /checkout/
Disallow: /account/
Disallow: /search?

# Block technical files
Disallow: /*.json$
Disallow: /*.xml$
Disallow: /*.txt$
Disallow: /api/

# Crawl-delay for different bots
User-agent: Googlebot
Crawl-delay: 1

User-agent: Bingbot
Crawl-delay: 2

User-agent: Slurp
Crawl-delay: 3

# Block problematic crawlers
User-agent: AhrefsBot
Disallow: /

User-agent: MJ12bot
Disallow: /

User-agent: DotBot
Disallow: /

# Sitemap location
Sitemap: ${this.options.siteDomain}/seo/sitemap.xml
`;

    res.set({
      'Content-Type': 'text/plain',
      'Cache-Control': 'public, max-age=86400' // Cache for 24 hours
    });
    res.send(robotsTxt);
  }

  @Get('schema/organization')
  async getOrganizationSchema(@Res() res: Response) {
    try {
      const schema = this.seoService.generateOrganizationJsonLd();
      res.set({
        'Content-Type': 'application/json',
        'Cache-Control': 'public, max-age=3600' // Cache for 1 hour
      });
      res.json(schema);
    } catch (error) {
      res.status(500).json({ error: 'Error generating organization schema' });
    }
  }

  @Get('schema/website')
  async getWebsiteSchema(@Res() res: Response) {
    try {
      const schema = this.seoService.generateWebsiteJsonLd();
      res.set({
        'Content-Type': 'application/json',
        'Cache-Control': 'public, max-age=3600' // Cache for 1 hour
      });
      res.json(schema);
    } catch (error) {
      res.status(500).json({ error: 'Error generating website schema' });
    }
  }

  @Get('schema/product/:productId')
  async getProductSchema(@Param('productId') productId: string, @Ctx() ctx: RequestContext, @Res() res: Response) {
    try {
      // Get product data from the service
      const productSeoData = await this.seoService.getProductSeoData(ctx);
      const product = productSeoData.find(p => p.id === productId || p.slug === productId);

      if (!product) {
        res.status(404).json({ error: 'Product not found' });
        return;
      }

      const schema = this.seoService.generateProductJsonLd(product);
      res.set({
        'Content-Type': 'application/json',
        'Cache-Control': 'public, max-age=300' // Cache for 5 minutes (products change more frequently)
      });
      res.json(schema);
    } catch (error) {
      res.status(500).json({ error: 'Error generating product schema' });
    }
  }
}